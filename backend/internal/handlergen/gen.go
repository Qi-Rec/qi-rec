// Package handlergen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package handlergen

import (
	"github.com/gin-gonic/gin"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Song defines model for Song.
type Song struct {
	Artist    *string `json:"artist,omitempty"`
	CoverLink *string `json:"cover_link,omitempty"`
	Name      *string `json:"name,omitempty"`
	SongLink  *string `json:"song_link,omitempty"`
}

// PostRecommendationJSONBody defines parameters for PostRecommendation.
type PostRecommendationJSONBody struct {
	PlaylistLink *string `json:"playlist_link,omitempty"`
}

// PostSigninJSONBody defines parameters for PostSignin.
type PostSigninJSONBody struct {
	Email    *openapi_types.Email `json:"email,omitempty"`
	Password *string              `json:"password,omitempty"`
}

// PostSignupJSONBody defines parameters for PostSignup.
type PostSignupJSONBody struct {
	Email    *openapi_types.Email `json:"email,omitempty"`
	Password *string              `json:"password,omitempty"`
}

// PostRecommendationJSONRequestBody defines body for PostRecommendation for application/json ContentType.
type PostRecommendationJSONRequestBody PostRecommendationJSONBody

// PostSigninJSONRequestBody defines body for PostSignin for application/json ContentType.
type PostSigninJSONRequestBody PostSigninJSONBody

// PostSignupJSONRequestBody defines body for PostSignup for application/json ContentType.
type PostSignupJSONRequestBody PostSignupJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// User logout
	// (POST /logout)
	PostLogout(c *gin.Context)
	// Get song recommendation from a Spotify playlist link
	// (POST /recommendation)
	PostRecommendation(c *gin.Context)
	// Get history of recommended songs
	// (GET /recommendation/history)
	GetRecommendationHistory(c *gin.Context)
	// User sign in
	// (POST /signin)
	PostSignin(c *gin.Context)
	// User sign up
	// (POST /signup)
	PostSignup(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostLogout operation middleware
func (siw *ServerInterfaceWrapper) PostLogout(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostLogout(c)
}

// PostRecommendation operation middleware
func (siw *ServerInterfaceWrapper) PostRecommendation(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostRecommendation(c)
}

// GetRecommendationHistory operation middleware
func (siw *ServerInterfaceWrapper) GetRecommendationHistory(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRecommendationHistory(c)
}

// PostSignin operation middleware
func (siw *ServerInterfaceWrapper) PostSignin(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostSignin(c)
}

// PostSignup operation middleware
func (siw *ServerInterfaceWrapper) PostSignup(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostSignup(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/logout", wrapper.PostLogout)
	router.POST(options.BaseURL+"/recommendation", wrapper.PostRecommendation)
	router.GET(options.BaseURL+"/recommendation/history", wrapper.GetRecommendationHistory)
	router.POST(options.BaseURL+"/signin", wrapper.PostSignin)
	router.POST(options.BaseURL+"/signup", wrapper.PostSignup)
}
